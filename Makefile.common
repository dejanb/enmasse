DOCKER_REGISTRY ?= docker.io
DOCKER_ORG      ?= enmasseproject
PROJECT_PREFIX  ?= enmasse
PROJECT_NAME    ?= $(shell basename $(CURDIR))
TAG             ?= latest
UPLOAD_TAG      ?= $(TAG)
VERSION         ?= latest
MOCHA_FILE      ?= build/test-results/test/TEST-$(PROJECT_NAME).xml
NPM             ?= $(shell command -v npm 2> /dev/null)

all: init build test package docker_build

init:
	mkdir -p build

clean_node:
	rm -rf node_modules coverage

clean: clean_node
	rm -rf build

npm_install:
        ifndef NPM
		$(warning "npm not found, node tests will be skipped")
        else
		npm install
        endif

npm_test: npm_install
        ifndef NPM
		$(warning "npm not found, node tests will be skipped")
        else
	       MOCHA_FILE=$(MOCHA_FILE) MOCHA_ARGS="$(MOCHA_ARGS)" npm run test
        endif

docker_build: package
	if [ -f Dockerfile ]; then docker build --build-arg version=$(TAG) -t $(PROJECT_PREFIX)-$(PROJECT_NAME):$(TAG) . ; fi
	docker images | grep $(PROJECT_PREFIX)

docker_tag:
	if [ -f Dockerfile ]; then docker tag $(PROJECT_PREFIX)-$(PROJECT_NAME):$(TAG) $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$(PROJECT_NAME):$(UPLOAD_TAG) ; fi

docker_push:
	if [ -f Dockerfile ]; then docker push $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$(PROJECT_NAME):$(UPLOAD_TAG) ; fi

.PHONY: all init build test package clean docker_build docker_tag docker_push
