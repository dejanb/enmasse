apiVersion: v1
kind: Template
metadata:
  labels:
    app: enmasse
  name: enmasse
objects:
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: queue-inmemory
  objects:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        cluster_id: ${CLUSTER_ID}
        io.enmasse.certSecretName: broker-internal-cert
      labels:
        app: enmasse
      name: ${NAME}
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
          labels:
            app: enmasse
            name: ${NAME}
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: ${ADDRESS}
            - name: CLUSTER_ID
              value: ${CLUSTER_ID}
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${BROKER_REPO}
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              initialDelaySeconds: 120
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 8161
              name: jolokia
            readinessProbe:
              tcpSocket:
                port: amqp
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
          volumes:
          - emptyDir: {}
            name: vol-${NAME}
          - name: ssl-certs
            secret:
              secretName: ${COLOCATED_ROUTER_SECRET}
          - name: authservice-ca
            secret:
              secretName: authservice-ca
          - name: address-controller-ca
            secret:
              secretName: address-controller-ca
          - name: broker-internal-cert
            secret:
              secretName: broker-internal-cert
          - configMap:
              name: hawkular-broker-config
            name: hawkular-openshift-agent
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: docker.io/enmasseproject/artemis:latest
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: docker.io/enmasseproject/topic-forwarder:latest
  - description: The image to use for the router
    name: ROUTER_REPO
    value: docker.io/enmasseproject/router:latest
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: The default distribution to use for unconfigured addresses
    name: ROUTER_DEFAULT_DISTRIBUTION
    value: unavailable
  - description: A valid addressSpace name for the address Space
    name: ADDRESS_SPACE
    required: true
  - description: A valid name for the deployment
    name: NAME
    required: true
  - description: A valid group id for the deployment
    name: CLUSTER_ID
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    value: ''
  - description: Name of secret containing router key and certificate
    name: COLOCATED_ROUTER_SECRET
    required: true
  - description: The hostname of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_HOST
    required: true
  - description: The port of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_PORT
    required: true
  - description: The client cert to use as identity against authentication service
    name: AUTHENTICATION_SERVICE_CLIENT_SECRET
  - description: The hostname to use in sasl init
    name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: queue-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        cluster_id: ${CLUSTER_ID}
      labels:
        app: enmasse
      name: pvc-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${STORAGE_CAPACITY}
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        cluster_id: ${CLUSTER_ID}
        io.enmasse.certSecretName: broker-internal-cert
      labels:
        app: enmasse
      name: ${NAME}
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
          labels:
            app: enmasse
            name: ${NAME}
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: ${ADDRESS}
            - name: CLUSTER_ID
              value: ${CLUSTER_ID}
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${BROKER_REPO}
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              initialDelaySeconds: 120
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 8161
              name: jolokia
            readinessProbe:
              tcpSocket:
                port: amqp
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
          volumes:
          - name: vol-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${NAME}
          - name: ssl-certs
            secret:
              secretName: ${COLOCATED_ROUTER_SECRET}
          - name: authservice-ca
            secret:
              secretName: authservice-ca
          - name: address-controller-ca
            secret:
              secretName: address-controller-ca
          - name: broker-internal-cert
            secret:
              secretName: broker-internal-cert
          - configMap:
              name: hawkular-broker-config
            name: hawkular-openshift-agent
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: docker.io/enmasseproject/artemis:latest
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: docker.io/enmasseproject/topic-forwarder:latest
  - description: The image to use for the router
    name: ROUTER_REPO
    value: docker.io/enmasseproject/router:latest
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: The default distribution to use for unconfigured addresses
    name: ROUTER_DEFAULT_DISTRIBUTION
    value: unavailable
  - description: A valid addressSpace name for the address Space
    name: ADDRESS_SPACE
    required: true
  - description: A valid name for the deployment
    name: NAME
    required: true
  - description: A valid group id for the deployment
    name: CLUSTER_ID
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    value: ''
  - description: Name of secret containing router key and certificate
    name: COLOCATED_ROUTER_SECRET
    required: true
  - description: The hostname of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_HOST
    required: true
  - description: The port of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_PORT
    required: true
  - description: The client cert to use as identity against authentication service
    name: AUTHENTICATION_SERVICE_CLIENT_SECRET
  - description: The hostname to use in sasl init
    name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: topic-inmemory
  objects:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        cluster_id: ${CLUSTER_ID}
        io.enmasse.certSecretName: broker-internal-cert
      labels:
        app: enmasse
      name: ${NAME}
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
          labels:
            app: enmasse
            name: ${NAME}
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            - name: CLUSTER_ID
              value: ${CLUSTER_ID}
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${BROKER_REPO}
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              initialDelaySeconds: 120
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 8161
              name: jolokia
            readinessProbe:
              tcpSocket:
                port: amqp
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            - name: LINK_CAPACITY
              value: ${ROUTER_LINK_CAPACITY}
            - name: DEFAULT_DISTRIBUTION
              value: ${ROUTER_DEFAULT_DISTRIBUTION}
            - name: AUTHENTICATION_SERVICE_HOST
              value: ${AUTHENTICATION_SERVICE_HOST}
            - name: AUTHENTICATION_SERVICE_PORT
              value: ${AUTHENTICATION_SERVICE_PORT}
            - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
              value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
            - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
              value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
            image: ${ROUTER_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            - containerPort: 55671
              name: amqps-normal
              protocol: TCP
            - containerPort: 56671
              name: amqps-broker
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
            volumeMounts:
            - mountPath: /etc/qpid-dispatch/ssl
              name: ssl-certs
              readOnly: true
            - mountPath: /etc/qpid-dispatch/authservice-ca
              name: authservice-ca
              readOnly: true
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
            - mountPath: /etc/qpid-dispatch/address-controller-ca
              name: address-controller-ca
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            - name: CLUSTER_ID
              value: ${NAME}
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${TOPIC_FORWARDER_REPO}
            livenessProbe:
              httpGet:
                path: /health
                port: health
              initialDelaySeconds: 60
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
          volumes:
          - emptyDir: {}
            name: vol-${NAME}
          - name: ssl-certs
            secret:
              secretName: ${COLOCATED_ROUTER_SECRET}
          - name: authservice-ca
            secret:
              secretName: authservice-ca
          - name: address-controller-ca
            secret:
              secretName: address-controller-ca
          - name: broker-internal-cert
            secret:
              secretName: broker-internal-cert
          - configMap:
              name: hawkular-broker-config
            name: hawkular-openshift-agent
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: docker.io/enmasseproject/artemis:latest
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: docker.io/enmasseproject/topic-forwarder:latest
  - description: The image to use for the router
    name: ROUTER_REPO
    value: docker.io/enmasseproject/router:latest
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: The default distribution to use for unconfigured addresses
    name: ROUTER_DEFAULT_DISTRIBUTION
    value: unavailable
  - description: A valid addressSpace name for the address Space
    name: ADDRESS_SPACE
    required: true
  - description: A valid name for the deployment
    name: NAME
    required: true
  - description: A valid group id for the deployment
    name: CLUSTER_ID
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    value: ''
  - description: Name of secret containing router key and certificate
    name: COLOCATED_ROUTER_SECRET
    required: true
  - description: The hostname of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_HOST
    required: true
  - description: The port of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_PORT
    required: true
  - description: The client cert to use as identity against authentication service
    name: AUTHENTICATION_SERVICE_CLIENT_SECRET
  - description: The hostname to use in sasl init
    name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: topic-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        cluster_id: ${CLUSTER_ID}
      labels:
        app: enmasse
      name: pvc-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${STORAGE_CAPACITY}
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        cluster_id: ${CLUSTER_ID}
        io.enmasse.certSecretName: broker-internal-cert
      labels:
        app: enmasse
      name: ${NAME}
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
          labels:
            app: enmasse
            name: ${NAME}
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            - name: CLUSTER_ID
              value: ${CLUSTER_ID}
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${BROKER_REPO}
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              initialDelaySeconds: 120
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 8161
              name: jolokia
            readinessProbe:
              tcpSocket:
                port: amqp
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            - name: LINK_CAPACITY
              value: ${ROUTER_LINK_CAPACITY}
            - name: DEFAULT_DISTRIBUTION
              value: ${ROUTER_DEFAULT_DISTRIBUTION}
            - name: AUTHENTICATION_SERVICE_HOST
              value: ${AUTHENTICATION_SERVICE_HOST}
            - name: AUTHENTICATION_SERVICE_PORT
              value: ${AUTHENTICATION_SERVICE_PORT}
            - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
              value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
            - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
              value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
            image: ${ROUTER_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            - containerPort: 55671
              name: amqps-normal
              protocol: TCP
            - containerPort: 56671
              name: amqps-broker
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
            volumeMounts:
            - mountPath: /etc/qpid-dispatch/ssl
              name: ssl-certs
              readOnly: true
            - mountPath: /etc/qpid-dispatch/authservice-ca
              name: authservice-ca
              readOnly: true
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
            - mountPath: /etc/qpid-dispatch/address-controller-ca
              name: address-controller-ca
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            - name: CLUSTER_ID
              value: ${NAME}
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${TOPIC_FORWARDER_REPO}
            livenessProbe:
              httpGet:
                path: /health
                port: health
              initialDelaySeconds: 60
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: broker-internal-cert
              readOnly: true
          volumes:
          - name: vol-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${NAME}
          - name: ssl-certs
            secret:
              secretName: ${COLOCATED_ROUTER_SECRET}
          - name: authservice-ca
            secret:
              secretName: authservice-ca
          - name: address-controller-ca
            secret:
              secretName: address-controller-ca
          - name: broker-internal-cert
            secret:
              secretName: broker-internal-cert
          - configMap:
              name: hawkular-broker-config
            name: hawkular-openshift-agent
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: docker.io/enmasseproject/artemis:latest
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: docker.io/enmasseproject/topic-forwarder:latest
  - description: The image to use for the router
    name: ROUTER_REPO
    value: docker.io/enmasseproject/router:latest
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: The default distribution to use for unconfigured addresses
    name: ROUTER_DEFAULT_DISTRIBUTION
    value: unavailable
  - description: A valid addressSpace name for the address Space
    name: ADDRESS_SPACE
    required: true
  - description: A valid name for the deployment
    name: NAME
    required: true
  - description: A valid group id for the deployment
    name: CLUSTER_ID
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    value: ''
  - description: Name of secret containing router key and certificate
    name: COLOCATED_ROUTER_SECRET
    required: true
  - description: The hostname of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_HOST
    required: true
  - description: The port of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_PORT
    required: true
  - description: The client cert to use as identity against authentication service
    name: AUTHENTICATION_SERVICE_CLIENT_SECRET
  - description: The hostname to use in sasl init
    name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: enmasse-instance-infra
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
      labels:
        app: enmasse
      name: ragent
    spec:
      ports:
      - name: amqp
        port: 5671
        targetPort: 55671
      selector:
        name: admin
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
      labels:
        app: enmasse
      name: configuration
    spec:
      ports:
      - name: amqps
        port: 5671
      selector:
        name: admin
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
      labels:
        app: enmasse
      name: queue-scheduler
    spec:
      ports:
      - name: amqp
        port: 5672
        targetPort: 55667
      selector:
        name: admin
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
      labels:
        app: enmasse
      name: console
    spec:
      ports:
      - name: amqp-ws
        port: 5672
        targetPort: 56720
      - name: http
        port: 8080
      selector:
        name: admin
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        service.alpha.openshift.io/dependencies: '[{"kind": "Service", "name": "queue-scheduler",
          "namespace": ""}, {"kind": "Service", "name": "configuration", "namespace":
          ""}, {"kind": "Service", "name": "ragent", "namespace": ""}, {"kind": "Service",
          "name": "console", "namespace": ""}, {"kind": "Service", "name": "subscription",
          "namespace": ""}, {"kind": "Service", "name": "mqtt", "namespace": ""}]'
        service.alpha.openshift.io/infrastructure: 'true'
      labels:
        app: enmasse
      name: messaging
    spec:
      ports:
      - name: amqp
        port: 5672
        protocol: TCP
        targetPort: 5672
      - name: amqps
        port: 5671
        protocol: TCP
        targetPort: 5671
      - name: amqps-normal
        port: 55671
        protocol: TCP
        targetPort: amqps-normal
      - name: amqps-broker
        port: 56671
        protocol: TCP
        targetPort: amqps-broker
      - name: inter-router
        port: 55672
        protocol: TCP
        targetPort: 55672
      selector:
        capability: router
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
      labels:
        app: enmasse
      name: subscription
    spec:
      ports:
      - name: amqp
        port: 5672
        protocol: TCP
        targetPort: 5672
      selector:
        name: subserv
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
      labels:
        app: enmasse
      name: mqtt
    spec:
      ports:
      - name: mqtt
        port: 1883
        protocol: TCP
        targetPort: 1883
      - name: secure-mqtt
        port: 8883
        protocol: TCP
        targetPort: 8883
      selector:
        name: mqtt-gateway
      type: ClusterIP
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        io.enmasse.certSecretName: router-internal-cert
      labels:
        app: enmasse
        name: qdrouterd
      name: qdrouterd
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            capability: router
            name: qdrouterd
        spec:
          containers:
          - env:
            - name: LINK_CAPACITY
              value: ${ROUTER_LINK_CAPACITY}
            - name: DEFAULT_DISTRIBUTION
              value: ${ROUTER_DEFAULT_DISTRIBUTION}
            - name: AUTHENTICATION_SERVICE_HOST
              value: ${AUTHENTICATION_SERVICE_HOST}
            - name: AUTHENTICATION_SERVICE_PORT
              value: ${AUTHENTICATION_SERVICE_PORT}
            - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
              value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
            - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
              value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
            image: ${ROUTER_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            - containerPort: 55671
              name: amqps-normal
              protocol: TCP
            - containerPort: 56671
              name: amqps-broker
              protocol: TCP
            volumeMounts:
            - mountPath: /etc/qpid-dispatch/ssl
              name: ssl-certs
              readOnly: true
            - mountPath: /etc/qpid-dispatch/authservice-ca
              name: authservice-ca
              readOnly: true
            - mountPath: /etc/enmasse-certs
              name: router-internal-cert
              readOnly: true
            - mountPath: /etc/qpid-dispatch/address-controller-ca
              name: address-controller-ca
              readOnly: true
          - env:
            - name: ROUTER_HOST
              value: 127.0.0.1
            - name: ROUTER_PORT
              value: '55671'
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${ROUTER_METRICS_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: metrics
            name: metrics
            ports:
            - containerPort: 8080
              name: metrics
              protocol: TCP
            resources:
              limits:
                memory: 32Mi
              requests:
                memory: 32Mi
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: router-internal-cert
              readOnly: true
          volumes:
          - configMap:
              name: hawkular-router-config
            name: hawkular-openshift-agent
          - name: ssl-certs
            secret:
              secretName: ${ROUTER_SECRET}
          - name: authservice-ca
            secret:
              secretName: authservice-ca
          - name: address-controller-ca
            secret:
              secretName: address-controller-ca
          - name: router-internal-cert
            secret:
              secretName: router-internal-cert
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        io.enmasse.certSecretName: subserv-internal-cert
      labels:
        app: enmasse
        name: subserv
      name: subserv
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            name: subserv
        spec:
          containers:
          - image: ${SUBSERV_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: amqp
            name: subserv
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            resources:
              limits:
                memory: 64Mi
              requests:
                memory: 64Mi
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: subserv-internal-cert
              readOnly: true
          volumes:
          - name: subserv-internal-cert
            secret:
              secretName: subserv-internal-cert
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
      labels:
        app: enmasse
        name: mqtt-gateway
      name: mqtt-gateway
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            name: mqtt-gateway
        spec:
          containers:
          - image: ${MQTT_GATEWAY_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: secure-mqtt
            name: mqtt-gateway-tls
            ports:
            - containerPort: 8883
              name: secure-mqtt
              protocol: TCP
            volumeMounts:
            - mountPath: /etc/mqtt-gateway/ssl
              name: ssl-certs
              readOnly: true
          - image: ${MQTT_GATEWAY_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: mqtt
            name: mqtt-gateway
            ports:
            - containerPort: 1883
              name: mqtt
              protocol: TCP
          volumes:
          - name: ssl-certs
            secret:
              secretName: ${MQTT_SECRET}
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        io.enmasse.certSecretName: mqtt-lwt-internal-cert
      labels:
        app: enmasse
        name: mqtt-lwt
      name: mqtt-lwt
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            name: mqtt-lwt
        spec:
          containers:
          - env:
            - name: CERT_DIR
              value: /etc/enmasse-certs
            - name: MESSAGING_SERVICE_NORMAL_PORT
              value: $(MESSAGING_SERVICE_PORT_AMQPS_NORMAL)
            - name: MESSAGING_SERVICE_ROUTE_CONTAINER_PORT
              value: $(MESSAGING_SERVICE_PORT_AMQPS_BROKER)
            image: ${MQTT_LWT_REPO}
            name: mqtt-lwt
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: mqtt-lwt-internal-cert
              readOnly: true
          volumes:
          - name: mqtt-lwt-internal-cert
            secret:
              secretName: mqtt-lwt-internal-cert
  - apiVersion: v1
    data:
      tls.crt: ${AUTHENTICATION_SERVICE_CA_CERT}
    kind: Secret
    metadata:
      name: authservice-ca
  - apiVersion: v1
    data:
      tls.crt: ${ADDRESS_CONTROLLER_CA_CERT}
    kind: Secret
    metadata:
      name: address-controller-ca
  - apiVersion: v1
    data:
      hawkular-openshift-agent: '{"endpoints": [{"collection_interval": "60s", "metrics":
        [{"id": "broker.threadCount", "name": "java.lang:type=Threading#ThreadCount",
        "tags": {"messagingComponent": "broker", "messagingMetricType": "threadCount"},
        "type": "counter"}, {"id": "broker.memoryHeapUsage", "name": "java.lang:type=Memory#HeapMemoryUsage#used",
        "tags": {"messagingComponent": "broker", "messagingMetricType": "heapUsage"},
        "type": "gauge"}, {"description": "Queue depth for ${address}", "id": "${address}.${queue}.${broker}.queueDepth",
        "name": "org.apache.activemq.artemis:address=*,broker=*,component=addresses,queue=*,routing-type=*,subcomponent=queues#MessageCount",
        "tags": {"messagingAddress": "${address}", "messagingBroker": "{broker}",
        "messagingMetricType": "queueDepth", "messagingQueue": "${queue}"}, "type":
        "gauge"}, {"description": "Number of consumers for ${address}", "id": "${address}.${queue}.${broker}.numConsumers",
        "name": "org.apache.activemq.artemis:address=*,broker=*,component=addresses,queue=*,routing-type=*,subcomponent=queues#ConsumerCount",
        "tags": {"messagingAddress": "${address}", "messagingBroker": "{broker}",
        "messagingMetricType": "numConsumers", "messagingQueue": "${queue}"}, "type":
        "gauge"}], "path": "/jolokia/", "port": 8161, "protocol": "http", "type":
        "jolokia"}]}'
    kind: ConfigMap
    metadata:
      name: hawkular-broker-config
  - apiVersion: v1
    data:
      hawkular-openshift-agent: '{"endpoints": [{"collection_interval": "60s", "metrics":
        [{"id": "router.totalConnectionCount", "name": "totalConnectionCount", "tags":
        {"messagingComponent": "router", "messagingMetricType": "totalConnectionCount"}},
        {"id": "router.totalLinkCount", "name": "totalLinkCount", "tags": {"messagingComponent":
        "router", "messagingMetricType": "totalLinkCount"}}, {"id": "router.producerCount",
        "name": "producerCount", "tags": {"messagingComponent": "router", "messagingMetricType":
        "producerCount"}}, {"id": "router.consumerCount", "name": "consumerCount",
        "tags": {"messagingComponent": "router", "messagingMetricType": "consumerCount"}}],
        "path": "/metrics/", "port": 8080, "protocol": "http", "type": "prometheus"}]}'
    kind: ConfigMap
    metadata:
      name: hawkular-router-config
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      annotations:
        addressSpace: ${ADDRESS_SPACE}
        io.enmasse.certSecretName: admin-internal-cert
      labels:
        app: enmasse
        name: admin
      name: admin
    spec:
      replicas: 1
      template:
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            name: admin
        spec:
          containers:
          - env:
            - name: CONFIGURATION_SERVICE_HOST
              value: localhost
            - name: CONFIGURATION_SERVICE_PORT
              value: '5671'
            - name: CERT_DIR
              value: /etc/enmasse-certs
            - name: PROBE_PORT
              value: '8888'
            image: ${RAGENT_REPO}
            livenessProbe:
              httpGet:
                port: http
              initialDelaySeconds: 60
            name: ragent
            ports:
            - containerPort: 55671
              name: amqp
              protocol: TCP
            - containerPort: 8888
              name: http
              protocol: TCP
            resources:
              limits:
                memory: 64Mi
              requests:
                memory: 64Mi
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: admin-internal-cert
              readOnly: true
          - env:
            - name: CONFIGURATION_SERVICE_HOST
              value: localhost
            - name: CONFIGURATION_SERVICE_PORT
              value: '5671'
            - name: LISTEN_PORT
              value: '55667'
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${QUEUE_SCHEDULER_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: amqp
            name: queue-scheduler
            ports:
            - containerPort: 55667
              name: amqp
              protocol: TCP
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: admin-internal-cert
              readOnly: true
          - env:
            - name: CONFIGURATION_SERVICE_HOST
              value: localhost
            - name: CONFIGURATION_SERVICE_PORT
              value: '5671'
            - name: ADDRESS_SPACE_SERVICE_HOST
              value: ${ADDRESS_SPACE_SERVICE_HOST}
            - name: ADDRESS_SPACE
              value: ${ADDRESS_SPACE}
            - name: ADDRESS_CONTROLLER_CA
              value: /opt/console/address-controller-ca/tls.crt
            - name: ADDRESS_SPACE_PASSWORD_FILE
              value: /opt/console/address-space-credentials/api.passwd
            - name: AUTHENTICATION_SERVICE_HOST
              value: ${AUTHENTICATION_SERVICE_HOST}
            - name: AUTHENTICATION_SERVICE_PORT
              value: ${AUTHENTICATION_SERVICE_PORT}
            - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
              value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
            - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
              value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
            image: ${CONSOLE_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: http
            name: console
            ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 56720
              name: amqp-ws
              protocol: TCP
            resources:
              limits:
                memory: 64Mi
              requests:
                memory: 64Mi
            volumeMounts:
            - mountPath: /opt/console/authservice-ca
              name: authservice-ca
              readOnly: true
            - mountPath: /etc/enmasse-certs
              name: admin-internal-cert
              readOnly: true
            - mountPath: /opt/console/address-controller-ca
              name: address-controller-ca
              readOnly: true
            - mountPath: /opt/console/address-space-credentials
              name: address-space-credentials
              readOnly: true
          - env:
            - name: CERT_DIR
              value: /etc/enmasse-certs
            image: ${CONFIGSERV_REPO}
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: amqps
            name: configserv
            ports:
            - containerPort: 5671
              name: amqps
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
            volumeMounts:
            - mountPath: /etc/enmasse-certs
              name: admin-internal-cert
              readOnly: true
          volumes:
          - name: authservice-ca
            secret:
              secretName: authservice-ca
          - name: address-controller-ca
            secret:
              secretName: address-controller-ca
          - name: admin-internal-cert
            secret:
              secretName: admin-internal-cert
          - name: address-space-credentials
            secret:
              secretName: address-space-credentials
  - apiVersion: v1
    data:
      api.passwd: ${ADDRESS_SPACE_PASSWORD}
    kind: Secret
    metadata:
      name: address-space-credentials
  parameters:
  - description: Hostname where API server can be reached
    name: ADDRESS_SPACE_SERVICE_HOST
    value: ''
  - description: The image to use for the router
    name: ROUTER_REPO
    value: docker.io/enmasseproject/router:latest
  - description: The image to use for the router metrics collector
    name: ROUTER_METRICS_REPO
    value: docker.io/enmasseproject/router-metrics:latest
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: The default distribution to use for unconfigured addresses
    name: ROUTER_DEFAULT_DISTRIBUTION
    value: unavailable
  - description: The image to use for the configuration service
    name: CONFIGSERV_REPO
    value: docker.io/enmasseproject/configserv:latest
  - description: The docker image to use for the queue scheduler
    name: QUEUE_SCHEDULER_REPO
    value: docker.io/enmasseproject/queue-scheduler:latest
  - description: The image to use for the router agent
    name: RAGENT_REPO
    value: docker.io/enmasseproject/ragent:latest
  - description: The image to use for the subscription services
    name: SUBSERV_REPO
    value: docker.io/enmasseproject/subserv:latest
  - description: The image to use for the console
    name: CONSOLE_REPO
    value: docker.io/enmasseproject/console:latest
  - description: The hostname to use for the exposed route for messaging
    name: MESSAGING_HOSTNAME
  - description: The image to use for the MQTT gateway
    name: MQTT_GATEWAY_REPO
    value: docker.io/enmasseproject/mqtt-gateway:latest
  - description: The hostname to use for the exposed route for MQTT
    name: MQTT_GATEWAY_HOSTNAME
  - description: The hostname to use for the exposed route for the messaging console
    name: CONSOLE_HOSTNAME
  - description: The secret to mount for router private key and certificate
    name: ROUTER_SECRET
    required: true
  - description: The secret to mount for MQTT private key and certificate
    name: MQTT_SECRET
    required: true
  - description: The image to use for the MQTT LWT
    name: MQTT_LWT_REPO
    value: docker.io/enmasseproject/mqtt-lwt:latest
  - description: The address space this infrastructure is deployed for
    name: ADDRESS_SPACE
    required: true
  - description: The hostname of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_HOST
    required: true
  - description: The port of the authentication service used by this address space
    name: AUTHENTICATION_SERVICE_PORT
    required: true
  - description: The CA cert to use for validating authentication service cert
    name: AUTHENTICATION_SERVICE_CA_CERT
  - description: The client cert to use as identity against authentication service
    name: AUTHENTICATION_SERVICE_CLIENT_SECRET
  - description: The hostname to use in sasl init
    name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
  - description: The CA cert to use for validating address controller identity
    name: ADDRESS_CONTROLLER_CA_CERT
  - description: Password for authenticating against address controller
    name: ADDRESS_SPACE_PASSWORD
  - description: The image to use for the AMQP Kafka Bridge
    name: AMQP_KAFKA_BRIDGE_REPO
    value: docker.io/enmasseproject/amqp-kafka-bridge:latest
  - description: A list of host/port pairs to use for establishing the initial connection
      to the Kafka cluster
    name: KAFKA_BOOTSTRAP_SERVERS
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: address-controller
    name: address-controller
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          name: address-controller
      spec:
        containers:
        - env:
          - name: MULTIINSTANCE
            value: ${MULTIINSTANCE}
          - name: CA_DIR
            value: /ca-cert
          - name: ADDRESS_SPACE_USER_DB_SECRET_NAME
            value: address-controller-userdb
          - name: ADDRESS_CONTROLLER_ENABLE_API_AUTH
            value: ${ADDRESS_CONTROLLER_ENABLE_API_AUTH}
          image: ${ADDRESS_CONTROLLER_REPO}
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: http
          name: address-controller
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8081
            name: https
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 256Mi
          volumeMounts:
          - mountPath: /ca-cert
            name: ca-cert
            readOnly: true
          - mountPath: /address-controller-cert
            name: address-controller-cert
            readOnly: true
        serviceAccount: enmasse-service-account
        volumes:
        - name: ca-cert
          secret:
            secretName: ${ENMASSE_CA_SECRET}
        - name: address-controller-cert
          secret:
            secretName: ${ADDRESS_CONTROLLER_CERT_SECRET}
- apiVersion: v1
  data: {}
  kind: Secret
  metadata:
    name: address-controller-userdb
- apiVersion: v1
  kind: Service
  metadata:
    annotations: {}
    labels:
      app: enmasse
    name: address-controller
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
    - name: https
      port: 8081
      protocol: TCP
      targetPort: https
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: amqp
    selector:
      name: address-controller
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: enmasse
    name: restapi
  spec:
    host: ${RESTAPI_HOSTNAME}
    path: /v1
    port:
      targetPort: http
    to:
      kind: Service
      name: address-controller
parameters:
- description: The hostname to use for the exposed route for the REST API
  name: RESTAPI_HOSTNAME
- description: If set to true, the address controller will deploy infrastructure to
    separate namespaces
  name: MULTIINSTANCE
  value: 'false'
- description: The docker image to use for the address controller
  name: ADDRESS_CONTROLLER_REPO
  value: docker.io/enmasseproject/address-controller:latest
- description: Name of the secret containing the EnMasse CA
  name: ENMASSE_CA_SECRET
  value: enmasse-ca
- description: Name of the secret containing the address controller certificate
  name: ADDRESS_CONTROLLER_CERT_SECRET
  value: address-controller-cert
- description: Enable/disable user authentication for API
  name: ADDRESS_CONTROLLER_ENABLE_API_AUTH
  value: 'false'
